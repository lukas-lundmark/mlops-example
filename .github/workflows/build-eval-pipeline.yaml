name: Continuous Integration Pipeline Rebuild
on:
  push:
    branches: [main]
    paths:
      - 'ml_pipelines/**'
      - 'src/**'
  pull_request:
    paths:
      - 'ml_pipelines/**'
      - 'src/**'
  workflow_dispatch:

env:
  RESOURCE_GROUP: mlops-rg
  WORKSPACE: azure-ml-toyota-demo
  MODEL_NAME: temp-test-model

jobs:
  run-train-pipeline:
    name: Run Train Pipeline
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/lukas-lundmark/mlops-ci-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    steps:

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: AML Login
        uses: ./.github/actions/aml_login
        with:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          WORKSPACE: ${{ env.WORKSPACE }}

      - name: Build pipeline
        id: build-pipeline
        run: |
          OUTPUTFILE="output.txt"
          python -m ml_pipelines.complex_pipeline.build_pipeline --pipeline-id-output $OUTPUTFILE
          echo ::set-output name=newpipelineid::$(cat $OUTPUTFILE)

      - name: Run New Pipeline
        id: run-pipeline
        env:
          EXPERIMENT_NAME: CI-EXPERIMENT-NAME
        run: |
          PIPELINEID="${{ steps.build-pipeline.outputs.newpipelineid }}"
          STATUS_OUTPUT="output.txt"

          python -m ml_pipelines.complex_pipeline.run_pipeline \
            --pipeline-id $PIPELINEID \
            --status-output $STATUS_OUTPUT \
            --ignore-data-check
          echo ::set-output name=status::$(cat $STATUS_OUTPUT)

      - name: Disable Failed Pipeline
        if: |
          steps.run-pipeline.outputs.status != 'Finished'
        run: |
          PIPELINEID="${{ steps.build-pipeline.outputs.newpipelineid }}"
          python -m ml_pipelines.complex_pipeline.disable_pipeline --pipeline-id $PIPELINEID
          echo "The new pipeline didn't improve results so we fail"
          exit 1

      - name: Download Model ID from AML
        id: download-model
        run : |
          python -m ml_pipelines.misc.download_model --output model.txt
          echo ::set-output name=model::$(cat model.txt)

      - name: Write pipeline and model id to
        id: prepare-output
        run : |
          JSON_OBJECT="{\"model\": \"${{ steps.download-model.outputs.model }}\", \"pipeline\": \"${{ steps.build-pipeline.outputs.newpipelineid }}\"}"
          echo $JSON_OBJECT > build-output.json
          echo ::set-output name=object::$JSON_OBJECT

      - name: Upload model id as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: ./build-output.json

      - name: Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CR_PAT }}
          event-type: model-trained-event
          client-payload: ${{ steps.prepare-output.outputs.object }}
