name: Automatic Training
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  RESOURCE_GROUP: mlops-rg
  WORKSPACE: azure-ml-toyota-demo
  TRAIN_PIPELINE_NAME: train-pipeline
  PIPELINE_ENDPOINT_NAME: train-pipeline-endpoint

jobs:
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'environment_setup/**'

      - name: Build and Push
        if: steps.filter.outputs.workflows == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./environment_setup/
          tags: |
            ghcr.io/ghcr.io/lukas-lundmark/mlops-ci-image:latest
            ghcr.io/ghcr.io/lukas-lundmark/mlops-ci-image:${{ github.sha }}

          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  run-train-pipeline:
    name: Run Train Pipeline
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/lukas-lundmark/mlops-ci-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    steps:

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: AML Login
        uses: ./.github/actions/aml_login
        with:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          WORKSPACE: ${{ env.WORKSPACE }}

      - name: filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'ml_pipelines/**'
              - 'src/**'

      - name: Build pipeline
        id: build-pipeline
        if: |
          ${{ steps.filter.outputs.workflows }} == 'true'
        run: |
          OUTPUTFILE="output.txt"
          python -m ml_pipelines.complex_pipeline.build_pipeline --pipeline-id-output $OUTPUTFILE
          echo ::set-output name=newpipelineid::$(cat $OUTPUTFILE)

      - name: Run New Pipeline
        id: run-pipeline
        if: |
          ${{ steps.filter.outputs.workflows }} == 'true'
        env:
          EXPERIMENT_NAME: CI-EXPERIMENT-NAME
        run: |
          PIPELINEID="${{ steps.build-pipeline.outputs.newpipelineid }}"
          STATUS_OUTPUT="output.txt"

          python -m ml_pipelines.complex_pipeline.run_pipeline \
            --pipeline-id $PIPELINEID \
            --status-output $STATUS_OUTPUT
          echo ::set-output name=status::$(cat $STATUS_OUTPUT)

      - name: Set Pipeline Endpoint
        if: |
          ${{ steps.filter.outputs.workflows }} == 'true' &&
          ${{ steps.run-pipeline.outputs.status }} == 'Succeeded'
        run: |
          PIPELINEID="${{ steps.build-pipeline.outputs.newpipelineid }}"
          python -m ml_pipelines.complex_pipeline.set_pipeline_endpoint --pipeline-id $PIPELINEID

      - name: Disable Failed Pipeline
        if: |
          ${{ steps.filter.outputs.workflows }} == 'true' &&
          ${{ steps.run-pipeline.outputs.status }} != 'Succeeded'
        run: |
          PIPELINEID="${{ steps.build-pipeline.outputs.newpipelineid }}"
          python -m ml_pipelines.complex_pipeline.disable_pipeline --pipeline-id $PIPELINEID
